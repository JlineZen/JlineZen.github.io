<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[jquery中的noConflict机制]]></title>
      <url>http://jlinezen.github.io./2016/07/02/jquery%E4%B8%AD%E7%9A%84noConflict%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="jQuery中的noConflict机制"><a href="#jQuery中的noConflict机制" class="headerlink" title="jQuery中的noConflict机制"></a>jQuery中的noConflict机制</h2><p>一直以来，自己对jQuery的源码研究是中断而又重新再继续，发现自己缺乏好的习惯和坚持，以后对这方面能力还是要多加培养。</p>
<p>现在来谈下对jQuery对于多个版本的jquery和同时引用$引起的冲突的处理。其实，对于jQueryAPI比较熟悉的jser应该比较熟悉$.noConflict()。现在让我们看下这个方法的源码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _jQuery = <span class="built_in">window</span>.jQuery, <span class="comment">//版本冲突</span></div><div class="line">	_$ = <span class="built_in">window</span>.$; <span class="comment">//首先把命名空间$(并不是jQuery)保存到一个临时变量中</span></div><div class="line"></div><div class="line">jQuery.extend(&#123;</div><div class="line">	noConflict: <span class="function"><span class="keyword">function</span>(<span class="params">depp</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="built_in">window</span>.$ === jQuery) &#123;</div><div class="line">			<span class="built_in">window</span>.$ = _$; <span class="comment">//此时把$命名控制权交给同命名的其他js库</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (deep &amp;&amp; <span class="built_in">window</span>.$ === jQuery) &#123;</div><div class="line">			<span class="built_in">window</span>.jQuery = _jQuery; <span class="comment">//此时把jQuery命名控制权交给同命名的其他js库</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> jQuery;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>再来看上面所说的参数设定问题，如果 deep 没有设置，_$ 覆盖 window.$，此时 jQuery 别名 $ 失效，但 jQuery 本身完好无损。如果有其他类库或代码重新定义了 $ 变量，它的控制权就完全交接出去了。反之如果 deep 设置为 true 的话，_jQuery 覆盖 window.jQuery，此时 $ 和 jQuery 都将失效。</p>
<p>这种操作的好处是，不管是框架混用还是 jQuery 多版本共存这种高度冲突的执行环境，由于 noConflict 方法提供的移交机制，以及本身返回未被覆盖的 jQuery 对象，完全能够通过变量映射的方式解决冲突。</p>
<p><strong>启发</strong><br>当我们自己设计js小库的时候，我们也可以根据这个理论来设计我们自己的noConflict机制。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript框架设计-种子模块一]]></title>
      <url>http://jlinezen.github.io./2016/07/02/javascript%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1-%E7%A7%8D%E5%AD%90%E6%A8%A1%E5%9D%97%E4%B8%80/</url>
      <content type="html"><![CDATA[<h1 id="种子模块"><a href="#种子模块" class="headerlink" title="种子模块"></a>种子模块</h1><p>种子模块是框架设计中的核心部分，也是框架最先执行的一部分，所以要极具扩展性、稳定性及常用性。常见框架的种子模块至少具有类型拓展、数组化、类型判定、简单事件的绑定与卸载、无冲突处理、模块加载及domReady功能。</p>
<h2 id="1、无冲突处理"><a href="#1、无冲突处理" class="headerlink" title="1、无冲突处理"></a>1、无冲突处理</h2><p>参考jQuery源码，原理：利用临时变量将同命名变量或不同版本同框架(如jQuery版本很多)保存下来，然后使用函数处理控制权。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//jQuery noConflict源码</div><div class="line"></div><div class="line">var _$ = window.$, _jQuery = window.jQuery;</div><div class="line"></div><div class="line">$.extend(&#123;</div><div class="line">	noConflict: function(deep) &#123;</div><div class="line">		if (window.$ == jQuery) &#123;</div><div class="line">			window.$ = _$;</div><div class="line">		&#125;</div><div class="line">		if (deep &amp;&amp; window.$ == jQuery) &#123;</div><div class="line">			window.jQuery = _jQuery;</div><div class="line">		&#125;	</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>具体详情分析，请参看上篇<a href="http://jlinezen.github.io/2016/07/02/jquery%E4%B8%AD%E7%9A%84noConflict%E6%9C%BA%E5%88%B6/" target="_blank" rel="external">jqeury中的noConflict机制</a>;</p>
<h2 id="2、类型拓展"><a href="#2、类型拓展" class="headerlink" title="2、类型拓展"></a>2、类型拓展</h2><p>类型拓展是一个框架必须具有的功能，也就是我们需要在我们的命名空间上拓展功能，这也就是为什么jQuery会有这么多的插件，因为jQuery的$.extend 或 $.fn.extend函数。</p>
<p>一个最简单的extend的实现</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> extend = <span class="function"><span class="keyword">function</span>(<span class="params">target, source</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</div><div class="line">		target[key] = source[key];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> target;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>接下来我们分析下jQuery中的extend的实现：我这里使用最新的3.0,应该无差异</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> options, name, src, copy, copyIsArray, clone,</div><div class="line">		target = <span class="built_in">arguments</span>[ <span class="number">0</span> ] || &#123;&#125;, <span class="comment">//默认复制到的目标为第一个参数</span></div><div class="line">		i = <span class="number">1</span>, <span class="comment">//从第二个参数开始后面的算source</span></div><div class="line">		length = <span class="built_in">arguments</span>.length,</div><div class="line">		deep = <span class="literal">false</span>; <span class="comment">//是否深复制</span></div><div class="line">	</div><div class="line">	<span class="comment">// Handle a deep copy situation</span></div><div class="line">	<span class="keyword">if</span> ( <span class="keyword">typeof</span> target === <span class="string">"boolean"</span> ) &#123; <span class="comment">//如果第一个参数为boolean，处理深复制</span></div><div class="line">		deep = target;</div><div class="line"></div><div class="line">		<span class="comment">// Skip the boolean and the target //此时从第三个参数算source</span></div><div class="line">		target = <span class="built_in">arguments</span>[ i ] || &#123;&#125;;</div><div class="line">		i++;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Handle case when target is a string or something (possible in deep copy)</span></div><div class="line">	<span class="keyword">if</span> ( <span class="keyword">typeof</span> target !== <span class="string">"object"</span> &amp;&amp; !jQuery.isFunction( target ) ) &#123; <span class="comment">//处理如果target不是对象</span></div><div class="line">		target = &#123;&#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Extend jQuery itself if only one argument is passed</span></div><div class="line">	<span class="keyword">if</span> ( i === length ) &#123; <span class="comment">//如果只有个一个参数，则拓展自身，jQuery插件的写法</span></div><div class="line">		target = <span class="keyword">this</span>;</div><div class="line">		i--;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> ( ; i &lt; length; i++ ) &#123;</div><div class="line"></div><div class="line">		<span class="comment">// Only deal with non-null/undefined values</span></div><div class="line">		<span class="keyword">if</span> ( ( options = <span class="built_in">arguments</span>[ i ] ) != <span class="literal">null</span> ) &#123; <span class="comment">//null不处理</span></div><div class="line"></div><div class="line">			<span class="comment">// Extend the base object</span></div><div class="line">			<span class="keyword">for</span> ( name <span class="keyword">in</span> options ) &#123; <span class="comment">//遍历对象</span></div><div class="line">				src = target[ name ]; <span class="comment">//用src,copy处理,对target,resource对象不改变</span></div><div class="line">				copy = options[ name ];</div><div class="line"></div><div class="line">				<span class="comment">// Prevent never-ending loop</span></div><div class="line">				<span class="keyword">if</span> ( target === copy ) &#123; <span class="comment">//如果两个字段相等,跳过</span></div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Recurse if we're merging plain objects or arrays</span></div><div class="line">				<span class="keyword">if</span> ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject( copy ) ||</div><div class="line">					( copyIsArray = jQuery.isArray( copy ) ) ) ) &#123; </div><div class="line"></div><div class="line">					<span class="keyword">if</span> ( copyIsArray ) &#123; <span class="comment">//数组</span></div><div class="line">						copyIsArray = <span class="literal">false</span>;</div><div class="line">						clone = src &amp;&amp; jQuery.isArray( src ) ? src : [];</div><div class="line"></div><div class="line">					&#125; <span class="keyword">else</span> &#123; <span class="comment">//对象</span></div><div class="line">						clone = src &amp;&amp; jQuery.isPlainObject( src ) ? src : &#123;&#125;;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					<span class="comment">// Never move original objects, clone them</span></div><div class="line">					target[ name ] = jQuery.extend( deep, clone, copy );</div><div class="line"></div><div class="line">				<span class="comment">// Don't bring in undefined values</span></div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( copy !== <span class="literal">undefined</span> ) &#123;</div><div class="line">					target[ name ] = copy;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Return the modified object</span></div><div class="line">	<span class="keyword">return</span> target;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>自己写的一个，造造轮子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> extend = <span class="function"><span class="keyword">function</span>(<span class="params">target, source</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>), i = <span class="number">1</span>, key,</div><div class="line">		ride = <span class="keyword">typeof</span> args[args.length - <span class="number">1</span>] == <span class="string">'boolean'</span> ? args.pop() : <span class="literal">true</span>;</div><div class="line">	<span class="keyword">if</span> (args.length == <span class="number">1</span>) &#123;</div><div class="line">		target = <span class="keyword">this</span>.window ? &#123;&#125; : <span class="keyword">this</span>;</div><div class="line">		i = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> ((source = args[i++])) &#123;</div><div class="line">		<span class="keyword">for</span> (key <span class="keyword">in</span> source) &#123;</div><div class="line">			<span class="comment">//ride 为false,则不覆盖target同名字段</span></div><div class="line">			<span class="keyword">if</span> (<span class="built_in">Object</span>.hasOwnProperty.call(source, key) &amp;&amp; (ride || !(key <span class="keyword">in</span> target))) &#123;</div><div class="line">				target[key] = source[key];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> target;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于rem的响应式布局]]></title>
      <url>http://jlinezen.github.io./2016/06/29/%E5%9F%BA%E4%BA%8Erem%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<h3 id="rem的布局新见解"><a href="#rem的布局新见解" class="headerlink" title="rem的布局新见解"></a>rem的布局新见解</h3><p> 其实，在写这篇博客之前，我建议大家可以参看这篇文章<a href="http://www.codeceo.com/article/font-size-web-design.html" target="_blank" rel="external">从网易与淘宝的font-size思考前端设计稿与工作流</a>，我在仔细消化这篇文章后做了一个自己的看法和理解，欢迎交流。</p>
<h4 id="像素单位的选择"><a href="#像素单位的选择" class="headerlink" title="像素单位的选择"></a>像素单位的选择</h4><h5 id="em的没落"><a href="#em的没落" class="headerlink" title="em的没落"></a>em的没落</h5><p> em的计算与继承：em是基于父元素而来计算的，比如div的parent节点font-size为1.2em，如果我们此时再对div做一个font-size的设置为1.2em，如果1em=12px，那么此时的div font-size为14.4px。</p>
<h5 id="rem的受宠"><a href="#rem的受宠" class="headerlink" title="rem的受宠"></a>rem的受宠</h5><p> 恰恰相反，rem确实移动开发的最佳选择，因为rem的计算是基于html节点来换算px的。默认1rem = 16px。</p>
<h5 id="网易的移动端设计方法"><a href="#网易的移动端设计方法" class="headerlink" title="网易的移动端设计方法"></a>网易的移动端设计方法</h5><p> 如果仔细查看网易移动端新闻网页的查看，我们会清晰的发现html节点上有个很明显的标志就是style对font-size的设置。那么我们必须明白的就是这个值是怎么计算出来的。首先，我们必须根据设计稿来。当设计师标注好相关的字体、长度和宽度后，我们先要看psd设计图的大小。比如：我们的设计稿宽为1080px的话，那我们选个100px(好计算)，那么我们的视口宽度就是1080/100=10.8rem，也就是说100px就是1.08rem。当我们设计对应的宽高的时候就可以计算出相应的rem值。</p>
<p><strong>js动态设置</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win, doc, dw</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> docEl = doc.documentElement,</div><div class="line">			dw = dw || <span class="number">640</span>,</div><div class="line">			resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</div><div class="line">			recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">var</span> docElWidth = docEl.clientWidth;</div><div class="line">				(docElWidth &gt; <span class="number">640</span>) &amp;&amp; (docElWidth = <span class="number">640</span>);</div><div class="line">				<span class="keyword">if</span> (!docElWidth) <span class="keyword">return</span>;</div><div class="line">				docEl.style.fontSize = docElWidth / (<span class="number">640</span> / <span class="number">100</span>) + <span class="string">'px'</span>;  <span class="comment">//基于640px设计稿</span></div><div class="line">			&#125;;</div><div class="line">	<span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</div><div class="line">	win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</div><div class="line">   doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</div><div class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>, <span class="number">640</span>);</div></pre></td></tr></table></figure>
<p>这样就可以很好的按设计稿的尺寸来设置相应的宽高了，但是不要对字体用rem单位，还是要用相应的媒介查询来设置字体。千万要在html做视口设置:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1,maximum-scale=1, minimum-scale=1"</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flex 教程]]></title>
      <url>http://jlinezen.github.io./2016/03/17/Flex-%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Flex属性的用法"><a href="#Flex属性的用法" class="headerlink" title="Flex属性的用法"></a>Flex属性的用法</h1><p>关于对CSS3 Flex弹性盒模型的一篇简单学习教程。</p>
<a id="more"></a>
<h2 id="Flex-属性的浏览器兼容性"><a href="#Flex-属性的浏览器兼容性" class="headerlink" title="Flex 属性的浏览器兼容性"></a>Flex 属性的浏览器兼容性</h2><p>Can I use result的支持情况</p>
<p><a href="http://caniuse.com/#search=flex" target="_blank" rel="external">Can I use flex</a>   </p>
<h2 id="Flex-的用法（参看）"><a href="#Flex-的用法（参看）" class="headerlink" title="Flex 的用法（参看）"></a>Flex 的用法（参看）</h2><p>reference in <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">flex course</a>  </p>
<h2 id="Flex-的使用"><a href="#Flex-的使用" class="headerlink" title="Flex 的使用"></a>Flex 的使用</h2><ul>
<li><p>使用Flex box</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex; <span class="comment">/* inline-flex */</span></div><div class="line">  <span class="comment">/* more browser prefix your should add such as -moz, -webkit- and so on */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>主轴跟副轴<br>（具体依据是flex-direction属性）main-axis and cross-axis<br><img src="https://css-tricks.com/wp-content/uploads/2011/08/flexbox.png" alt="如图所示">  </p>
</li>
<li><p><strong>flex-direction</strong> 属性:  定义Flex盒模型子元素的方向<br><img src="https://css-tricks.com/wp-content/uploads/2014/05/flex-direction1.svg" alt="如图所示">  </p>
<ul>
<li>row (defaults):     从左边到右边（默认）</li>
<li>row-reverse:        与row相反</li>
<li>column:             从上边到下边</li>
<li>column-reverse:     与column相反<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-direction</span> &#123;</div><div class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | cloumn-reverse</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>justify-content</strong> 属性:<br>定义子元素的内容对齐方式（根据主轴方向）,如果主轴有剩余空间<br><img src="https://css-tricks.com/wp-content/uploads/2013/04/justify-content.svg" alt="如图所示">  </p>
<ul>
<li>flex-start     主轴开始方向</li>
<li>flex-end       主轴结束方向</li>
<li>center         始终居中</li>
<li>space-between  子元素之间同等间距（同Flex容器没有间距）</li>
<li>space-around   子元素之间同等间距且（同Flex容器有间距）<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex</span> &#123;</div><div class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>order</strong> 属性:<br>子元素之间的一些排序大小，order越大，次序越靠前（依据主轴方向）  </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item1</span> &#123;</div><div class="line">  <span class="attribute">order</span>: <span class="number">2</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.item2</span> &#123;</div><div class="line">  <span class="attribute">order</span>: <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/** 如果flex-direction为row，则item1子元素出现在item2子元素的左边 **/</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>flex</strong> 属性<br>flex-grow, flex-shrink, flex-basis 属性的组合, 自动补全剩余空间  </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span> | auto</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** 示例 **/</span></div><div class="line"></div><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">1000px</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: row;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.container</span> <span class="selector-class">.item1</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">280px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.container</span> <span class="selector-class">.item2</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.contianer</span> <span class="selector-class">.itme3</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** 我们可以计算出 item1, item2 的宽度 **/</span></div><div class="line"><span class="comment">/** 剩余空间： 1000 - 280 = 720 **/</span></div><div class="line"><span class="comment">/** 基数:  3 **/</span></div><div class="line"><span class="comment">/** item1 占宽 1/3 * 720 = 240 **/</span></div><div class="line"><span class="comment">/** item2 占宽 2/3 * 720 = 480 **/</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>flex-wrap</strong> 属性<br><img src="https://css-tricks.com/wp-content/uploads/2014/05/flex-wrap.svg" alt="如图所示"><br>定义当子元素超出父容器时是否自动另起一行</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-wrap</span> &#123;</div><div class="line">  <span class="attribute">flex-wrap</span>: no-wrap | wrap | wrap-reverse</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><strong>align-conten</strong> 属性<br>如果副轴有空余, 定义内容的对齐方式，类似justify-content属性<br><img src="https://css-tricks.com/wp-content/uploads/2013/04/align-content.svg" alt="如图所示"></li>
<li><strong>align-items</strong> 属性<br>定义子元素在副轴上的对齐方式<br><img src="https://css-tricks.com/wp-content/uploads/2014/05/align-items.svg" alt="如图所示">  <ul>
<li>flex-start:  副轴开始(取决于主轴)</li>
<li>flex-end:  副轴介绍</li>
<li>center:    居中对齐</li>
<li>baseline:  与字体的baseline平齐</li>
<li>stretch:   拉伸至Flex容器高度<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个Promise的简单实现]]></title>
      <url>http://jlinezen.github.io./2016/03/16/%E4%B8%80%E4%B8%AAPromise%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://dn-lay.qbox.me/d/file/other/2012-04-04/bb901cde60e0cf1f209679f24d06a708.jpg?imageView2/2/w/420/q/85" alt="example"> </p>
<a id="more"></a>    
<h2 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise"></a>什么是Promise</h2><p>  Promise就是抽象异步处理对象以及对其进行各种操作的组件。比较土的说法就是,提高多从回调带来的代码可阅读性。 </p>
<p>一个简单的实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.callbacks = [];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.prototype = &#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>: Promise,</div><div class="line"></div><div class="line">  resolve: function(result) &#123;</div><div class="line">    <span class="keyword">this</span>.complete(<span class="string">'resolve'</span>, result);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  reject: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.complete(<span class="string">'reject'</span>, result);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  complete: <span class="function"><span class="keyword">function</span>(<span class="params">type, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="keyword">this</span>.callbacks[<span class="number">0</span>]) &#123;</div><div class="line">      <span class="keyword">this</span>.callbacks.shift()[type](result);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  then: <span class="function"><span class="keyword">function</span>(<span class="params">successHandle, errorHandle</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.callbacks.push(&#123;</div><div class="line">      resolve: successHandle,</div><div class="line">      reject:  errorHandle</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>();</div><div class="line"><span class="keyword">var</span> delay1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        promise.resolve(<span class="string">'hello world'</span>);</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">    <span class="keyword">return</span> promise;</div><div class="line">&#125;</div><div class="line">delay1()</div><div class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">re</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> re = re + <span class="string">' Angular'</span>;</div><div class="line">            <span class="built_in">console</span>.log(re);</div><div class="line">            promise.resolve(re);</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 初探]]></title>
      <url>http://jlinezen.github.io./2016/03/16/hello-hexo/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
